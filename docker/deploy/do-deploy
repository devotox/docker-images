#!/bin/bash

# This script is used to deploy app to elasticbeanstalk
echo
echo "########################################################"
echo "####                Docker Deployment               ####"
echo "########################################################"
echo

# Retrieve from command line
version=$1
description=$2
deploy_target=$3
application_type=$4
unix_timestamp="$(date +%s)"
timestamp="$(date +'%d-%m-%Y')-$(date +'%H:%M:%S')"
types=("dev" "prod" "intranet" "website" "jenkins" "api")
targets=("platform-development" "platform-testing" "platform-intranet" "platform-api" "platform-jenkins")

# If not entered in command line ask for details
#########################################################################################################################

if [ -z "$version" ]
then
	read -p "Version: " version
fi

if [ -z "$description" ]
then
	read -p "Description: " description
fi

#########################################################################################################################

if [ -z "$deploy_target" ]
then
	read -p "Deploy Target [ platform-development | platform-testing | platform-intranet | platform-api | platform-jenkins ]: " deploy_target
fi

if [[ " ${targets[@]} " =~ " ${deploy_target} " ]]; then
	echo "Deploy Target Set ($deploy_target)..."
else
	echo "Incorrect Deploy Target. Select one of the choices above"
	exit 1;
fi

#########################################################################################################################

if [ -z "$application_type" ]
then
	read -p "Application To Deploy [ dev | prod | website | intranet | api | jenkins ]: " application_type
fi

if [[ " ${types[@]} " =~ " ${application_type} " ]]; then
	echo "Application Type Set ($application_type)..."
else
	echo "Incorrect Application Type. Select one of the choices above"
	exit 1;
fi

#########################################################################################################################

gitignore_path="$PWD/.gitignore"
deployment_branch="deployment-$unix_timestamp"
current_branch="$(git symbolic-ref --short -q HEAD)"

# Create deployment branch
git checkout -b $deployment_branch

# Make sure deployment branch is exact copy of upstream master
# git fetch upstream
# git reset --hard upstream/master
# echo

echo
# Remove .gitignore lines
sed -i -e "s|.ebextensions/environment.config|<env-config>|g" $gitignore_path
sed -i -e "s|Dockerrun.aws.json|<docker-aws-config>|g" $gitignore_path
sed -i -e "s|api/tests/config.js|<api-test-config>|g" $gitignore_path
sed -i -e "s|secrets.env|<secrets-env>|g" $gitignore_path
sed -i -e "s|sslcert/\*|<sslcert>|g" $gitignore_path

echo
# Copy the appropriate Dockerrun to root
echo "Deploying $application_type..."
cp -fv "aws/$application_type.aws.json" "Dockerrun.aws.json"

# Create application version
git add --all .
git commit -am "$description" --allow-empty
# git tag -a "$version" -m "$description"

# echo
# echo "Clean out all xattr"
# xattr -d com.apple.quarantine {,**/}*

echo
# Deploy application version
echo "Deploying to $deploy_target..."
eb use "$deploy_target"
eb init && eb deploy -l "$version" -m "$description" --timeout 1200
echo

# Return to current branch
git checkout $current_branch
git merge $deployment_branch
git reset --soft HEAD~1

# Remove the Dockerrun json copied here
rm -rfv "Dockerrun.aws.json"

# Add .gitignore lines back
sed -i -e "s|<env-config>|.ebextensions/environment.config|g" $gitignore_path
sed -i -e "s|<docker-aws-config>|Dockerrun.aws.json|g" $gitignore_path
sed -i -e "s|<api-test-config>|api/tests/config.js|g" $gitignore_path
sed -i -e "s|<secrets-env>|secrets.env|g" $gitignore_path
sed -i -e "s|<sslcert>|sslcert/\*|g" $gitignore_path

# Revert recently added files to untracked
git reset HEAD .ebextensions/environment.config
git reset HEAD docker/deploy/do-deploy
git reset HEAD shared/env/secrets.env
git reset HEAD Dockerrun.aws.json
git reset HEAD .gitignore
git reset HEAD sslcert

# Clean up deployment branch
git branch -D $deployment_branch
# git tag -d $version
