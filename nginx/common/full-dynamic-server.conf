
	listen 80 deferred;
	listen [::]:80 deferred;

	listen 443 ssl deferred http2;
	listen [::]:443 ssl deferred http2;

	set $fixed_www '';
	set $444_redirect 0;
	set $needs_redirect 0;

	# check and decide on adding www prefix
	#if ($host !~* ^www(.*)) {
	#	set $fixed_www 'www.';
	#	set $needs_redirect 1;
	#}

	# check and decide on moving to https based on real_scheme ( needed locally )
	# map.conf has real_scheme which aggregates scheme and http_x_forwarded_proto to a single variable
	if ($real_scheme != 'https') {
		set $needs_redirect 1;
	}

	if ($request_uri ~* ^.*elb-health-check\.html(\:80|\:443|\:8080|\:8443)?$ ) {
		return 200 '{ "healthy": true }';
	}

	# if its a status check do not redirect ( needed amazon )
	if ($request_uri = '/api/status') {
		set $needs_redirect 0;
	}

	# if its a ngrok.io link do not redirect
	if ($host ~ ngrok.io$) {
		set $needs_redirect 0;
	}

	# set $needs_redirect 0;
	# Redirect all requests to https and adds www prefix
	if ($needs_redirect) {
		return 301 https://$fixed_www$host$request_uri;
	}

	## Only allow these request methods
	if ($request_method !~ ^(GET|HEAD|POST|PUT|DELETE|OPTIONS)$ ) {
		set $444_redirect 1;
	}

	## Dont allow random ip scanning
	if ($host !~ \.(com|co\.uk|io)$ ) {
		set $444_redirect 1;
	}

	## Deny certain Referers (they will affect our SEO scores) ###
	if ( $http_referer ~* (babes|forsale|girl|jewelry|nudit|organic|poker|porn|teen) ) {
		set $444_redirect 1;
	}

	## Block download agents
	if ($http_user_agent ~* LWP::Simple|BBBike|wget) {
		set $444_redirect 1;
	}

	## Block some robots ##
	if ($http_user_agent ~* msnbot|scrapbot) {
		set $444_redirect 1;
	}

	# if its a status check do not redirect ( needed amazon )
	if ($request_uri = '/api/status') {
		set $444_redirect 0;
	}

	# if its a direct internal request from docker
	# using its networking feature do not redirect
	if ($host ~ ^server$) {
		set $444_redirect 0;
	}

	# set $444_redirect 0;
	# returns a 444 if initial restrictions are not met
	if ($444_redirect) {
		return 444;
	}

	## Enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
	## To avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
	# add_header Strict-Transport-Security "max-age=604800; includeSubDomains; preload; always";

	# Dynamic Subdomains
	server_name ~^(www\.)?((?<subdomain>.+?)\.)?((?<domain>.+?)\.)?(?<host_domain>.+)\.(?<tld>co.uk)$ ~^(www\.)?((?<subdomain>.+?)\.)?((?<domain>.+?)\.)?(?<host_domain>.+)\.(?<tld>.*)$;

	set $base_root "/var/app/current";

	set $root "${base_root}/website/public";

	# Add folder name that you want as a subdomain i.e. (app|intranet|<something>|<something-else>)
	if ( $subdomain ~* (intranet|intranet-beta|website-beta) ) {
		set $root "${base_root}/${subdomain}/dist";
	}

	root $root;

	#!!! IMPORTANT !!! We need to hide all system files from prying eyes
	# This will deny access to any hidden file (beginning with a .)
	location ~ /\. {
		deny  all;
		access_log off;
		log_not_found off;
	}

	location ~ ^/(images/|img/|video/|javascript/|js/|css/|stylesheets/|styles/|flash/|media/|static/|fonts/|font/|assets/) {
		add_header Cache-Control public;
		add_header Pragma public;
		include common/cors.conf;
		access_log off;
		expires max;
	}

	location ~ ^/(templates|sitmeap.xml|index.html|robots.txt|humans.txt|favicon.ico) {
		add_header Cache-Control no-cache;
		add_header Cache-Control private;
		add_header Pragma no-cache;
		add_header Pragma private;
		include common/cors.conf;
		expires 0;
	}

	location ~ ^/(legal/) {
		add_header Cache-Control no-cache;
		add_header Cache-Control private;
		add_header Pragma no-cache;
		add_header Pragma private;
		include common/cors.conf;
		expires 0;

		if ($http_user_agent ~* "googlebot|yahoo|bingbot|baiduspider|yandex|yeti|yodaobot|gigabot|ia_archiver|facebookexternalhit|twitterbot|developers\.google\.com") {
			return 403;
        }
		if ($http_user_agent ~* "twitterbot|facebot|adsbot-google-mobile|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
            return 403;
        }
	}

	location ~ ^/(node_modules|bower_components) {
		root "${base_root}/${subdomain}";
		try_files $uri $uri/ $uri/index.js;
	}

	location ~ ^/api/(spec|tests|public) {
		root "${base_root}";
		try_files $uri $uri/ $uri/index.html @api;
	}

	location ~ ^/api {
		try_files $uri $uri/ @api;
	}

	location ~ ^/tests/api {
		rewrite ^/tests/api(.*)?$ /api/tests$1 last;
	}

	location ~ ^/tests/(intranet|intranet-beta|website-beta)$ {
		set $full_domain $subdomain.$host_domain;

		if ($domain) {
			set $full_domain $domain.$host_domain;
		}

		rewrite ^/tests/(.*)$ https://$1.${full_domain}.${tld}/tests last;
	}

	location ~ ^/tests {
		try_files $uri $uri/ "${uri}index.html" "${uri}/index.html";
	}

	location ~ ^/cordova.js {
		try_files $uri $uri/ @ember;
	}

	location ~ ^/ember-cli-live-reload.js {
		try_files $uri $uri/ @ember;
	}

	location ~ ^/livereload.js {
		try_files $uri $uri/ @live-reload;
	}

	location @api {
		set $api_server "https://api_server";

		# include common/proxy.ssl.conf;

		proxy_pass $api_server;

		add_header Cache-Control no-cache;
		add_header Cache-Control private;
		add_header Pragma no-cache;
		add_header Pragma private;
		include common/cors.conf;
		expires 0;
	}

	location @ember {
		set $ember_server "http://${subdomain}_ember_server";

		proxy_pass $ember_server;
	}

	location @live-reload {

		set $live_reload_server "http://website_live_reload_server";

		if ($subdomain){
			set $live_reload_server "http://${subdomain}_live_reload_server";
		}

		proxy_pass $live_reload_server;

		proxy_hide_header Content-Type;

		add_header Content-Type "application/javascript";
	}

	location @prerender {
		# proxy_set_header X-Prerender-Token qiiDAEtYRKbDkIfjXCbo;

		set $prerender 0;

		if ($http_user_agent ~* "googlebot|yahoo|bingbot|baiduspider|yandex|yeti|yodaobot|gigabot|ia_archiver|facebookexternalhit|twitterbot|developers\.google\.com") {
            set $prerender 1;
        }
		if ($http_user_agent ~* "twitterbot|facebot|adsbot-google-mobile|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
            set $prerender 1;
        }
        if ($args ~ "_escaped_fragment_|prerender=1") {
            set $prerender 1;
        }
		if ($http_user_agent ~ "Prerender") {
			set $prerender 0;
		}
		if ($uri ~ "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|woff2)") {
			set $prerender 0;
		}

		if ($prerender = 1) {
			#setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
			set $prerender "service.prerender.io";
			proxy_pass http://$prerender;
			add_header Prerender "1";

			rewrite .* /$real_scheme://$host$request_uri? break;
		}
		if ($prerender = 0) {
			rewrite .* /index.html break;
		}
	}

	location / {

		include common/cors.conf;

		# include common/restricted.conf;

		try_files $uri $uri/ @prerender;
	}