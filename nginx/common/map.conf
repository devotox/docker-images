# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
	default $http_x_forwarded_proto;
	''      $scheme;
}

# Sets a $real_scheme variable whose value is the scheme passed by the load
# balancer in X-Forwarded-Proto (if any), defaulting to $scheme.
# Similar to how the HttpRealIp module treats X-Forwarded-For.
map $http_x_forwarded_proto $real_scheme {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive Upgrade, set Connection to 'upgrade'; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
	default upgrade;
	''      close;
}

# CORS Header
map $http_origin $cors_header {
    default '';
    ~^https?://[^/]+\.(localhost|prerender|platform.local|platform.ngrok)\.(com|co\.uk|io)(:[0-9]+)?$ $http_origin;
}

# Gets the basename of the original request
map $request_uri $request_basename {
	~/(?<captured_request_basename>[^/?]*)(?:\?|$) $captured_request_basename;
}

# Gets the basename of the current uri
map $uri $basename {
	~/(?<captured_basename>[^/]*)$ $captured_basename;
}